// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: vocabulary.proto

package vocabulary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VocabularyServiceClient is the client API for VocabularyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VocabularyServiceClient interface {
	GetChallenge(ctx context.Context, in *GetChallengeRequest, opts ...grpc.CallOption) (*GetChallengeResponse, error)
	PromoteWord(ctx context.Context, in *PromoteWordRequest, opts ...grpc.CallOption) (*PromoteWordResponse, error)
	ResistWord(ctx context.Context, in *ResistWordRequest, opts ...grpc.CallOption) (*ResistWordResponse, error)
	SetAlreadyLearned(ctx context.Context, in *SetAlreadyLearnedRequest, opts ...grpc.CallOption) (*SetAlreadyLearnedResponse, error)
}

type vocabularyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVocabularyServiceClient(cc grpc.ClientConnInterface) VocabularyServiceClient {
	return &vocabularyServiceClient{cc}
}

func (c *vocabularyServiceClient) GetChallenge(ctx context.Context, in *GetChallengeRequest, opts ...grpc.CallOption) (*GetChallengeResponse, error) {
	out := new(GetChallengeResponse)
	err := c.cc.Invoke(ctx, "/vocabulary.VocabularyService/GetChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) PromoteWord(ctx context.Context, in *PromoteWordRequest, opts ...grpc.CallOption) (*PromoteWordResponse, error) {
	out := new(PromoteWordResponse)
	err := c.cc.Invoke(ctx, "/vocabulary.VocabularyService/PromoteWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) ResistWord(ctx context.Context, in *ResistWordRequest, opts ...grpc.CallOption) (*ResistWordResponse, error) {
	out := new(ResistWordResponse)
	err := c.cc.Invoke(ctx, "/vocabulary.VocabularyService/ResistWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) SetAlreadyLearned(ctx context.Context, in *SetAlreadyLearnedRequest, opts ...grpc.CallOption) (*SetAlreadyLearnedResponse, error) {
	out := new(SetAlreadyLearnedResponse)
	err := c.cc.Invoke(ctx, "/vocabulary.VocabularyService/SetAlreadyLearned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VocabularyServiceServer is the server API for VocabularyService service.
// All implementations must embed UnimplementedVocabularyServiceServer
// for forward compatibility
type VocabularyServiceServer interface {
	GetChallenge(context.Context, *GetChallengeRequest) (*GetChallengeResponse, error)
	PromoteWord(context.Context, *PromoteWordRequest) (*PromoteWordResponse, error)
	ResistWord(context.Context, *ResistWordRequest) (*ResistWordResponse, error)
	SetAlreadyLearned(context.Context, *SetAlreadyLearnedRequest) (*SetAlreadyLearnedResponse, error)
	mustEmbedUnimplementedVocabularyServiceServer()
}

// UnimplementedVocabularyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVocabularyServiceServer struct {
}

func (UnimplementedVocabularyServiceServer) GetChallenge(context.Context, *GetChallengeRequest) (*GetChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenge not implemented")
}
func (UnimplementedVocabularyServiceServer) PromoteWord(context.Context, *PromoteWordRequest) (*PromoteWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteWord not implemented")
}
func (UnimplementedVocabularyServiceServer) ResistWord(context.Context, *ResistWordRequest) (*ResistWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResistWord not implemented")
}
func (UnimplementedVocabularyServiceServer) SetAlreadyLearned(context.Context, *SetAlreadyLearnedRequest) (*SetAlreadyLearnedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAlreadyLearned not implemented")
}
func (UnimplementedVocabularyServiceServer) mustEmbedUnimplementedVocabularyServiceServer() {}

// UnsafeVocabularyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VocabularyServiceServer will
// result in compilation errors.
type UnsafeVocabularyServiceServer interface {
	mustEmbedUnimplementedVocabularyServiceServer()
}

func RegisterVocabularyServiceServer(s grpc.ServiceRegistrar, srv VocabularyServiceServer) {
	s.RegisterService(&VocabularyService_ServiceDesc, srv)
}

func _VocabularyService_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vocabulary.VocabularyService/GetChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).GetChallenge(ctx, req.(*GetChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_PromoteWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).PromoteWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vocabulary.VocabularyService/PromoteWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).PromoteWord(ctx, req.(*PromoteWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_ResistWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResistWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).ResistWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vocabulary.VocabularyService/ResistWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).ResistWord(ctx, req.(*ResistWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_SetAlreadyLearned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAlreadyLearnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).SetAlreadyLearned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vocabulary.VocabularyService/SetAlreadyLearned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).SetAlreadyLearned(ctx, req.(*SetAlreadyLearnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VocabularyService_ServiceDesc is the grpc.ServiceDesc for VocabularyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VocabularyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vocabulary.VocabularyService",
	HandlerType: (*VocabularyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChallenge",
			Handler:    _VocabularyService_GetChallenge_Handler,
		},
		{
			MethodName: "PromoteWord",
			Handler:    _VocabularyService_PromoteWord_Handler,
		},
		{
			MethodName: "ResistWord",
			Handler:    _VocabularyService_ResistWord_Handler,
		},
		{
			MethodName: "SetAlreadyLearned",
			Handler:    _VocabularyService_SetAlreadyLearned_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vocabulary.proto",
}
